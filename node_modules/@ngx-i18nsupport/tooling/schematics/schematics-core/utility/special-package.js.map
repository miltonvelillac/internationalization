{"version":3,"file":"special-package.js","sourceRoot":"","sources":["../../../../../projects/tooling/src/schematics/schematics-core/utility/special-package.ts"],"names":[],"mappings":";AAAA;;GAEG;;AAYH;;;;GAIG;AACH,yBAAgC,IAAU;IACtC,MAAM,IAAI,GAAG,eAAe,CAAC;IAC7B,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChC,IAAI,CAAC,OAAO,EAAE;QACV,OAAO,IAAI,CAAC;KACf;IACD,MAAM,aAAa,GAAG,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAChD,OAAO,IAAI,CAAC,KAAK,CAAC,aAAa,CAAiB,CAAC;AACrD,CAAC;AARD,0CAQC;AAED;;;;GAIG;AACH,kCACI,IAAU,EACV,UAAkB;IAElB,MAAM,WAAW,GAAsB,eAAe,CAAC,IAAI,CAAC,CAAC;IAC7D,IAAI,CAAC,WAAW,EAAE;QACd,OAAO,IAAI,CAAC;KACf;IACD,OAAO,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;AAC3C,CAAC;AATD,4DASC;AAED;;;;;GAKG;AACH,gCACI,IAAU,EACV,UAAkB,EAClB,OAAe;IAEf,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE;QAC7B,MAAM,cAAc,GAAG,SAAS,CAAC;QACjC,MAAM,kBAAkB,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACrD,IAAI,kBAAkB,EAAE;YACpB,MAAM,UAAU,GAAG,kBAAkB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YACxD,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YACpC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE;gBACvB,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC;aAC7B;YACD,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,UAAU,CAAC,EAAE;gBACnC,IAAI,CAAC,cAAc,CAAC,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC;aAC9C;YACD,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;SACjE;KACJ;IACD,OAAO,IAAI,CAAC;AAChB,CAAC;AArBD,wDAqBC","sourcesContent":["/**\r\n * Additional package.json spefific tool functions that are not part of normal package.ts\r\n */\r\n\r\nimport {Tree} from '@angular-devkit/schematics';\r\n\r\n/**\r\n * rudimentary interface of package.json (only what is used here).\r\n */\r\nexport interface IPackageJson {\r\n    devDependencies: { [packagename: string]: string };\r\n    scripts: { [scriptname: string]: string };\r\n}\r\n\r\n/**\r\n * Read package.json\r\n * @host the tree to read from\r\n * @return content or null, if file does not exist.\r\n */\r\nexport function readPackageJson(host: Tree): IPackageJson|null {\r\n    const path = `/package.json`;\r\n    const content = host.read(path);\r\n    if (!content) {\r\n        return null;\r\n    }\r\n    const contentString = content.toString('UTF-8');\r\n    return JSON.parse(contentString) as IPackageJson;\r\n}\r\n\r\n/**\r\n * Get a script with given name or null, if not existing.\r\n * @param host the tree to read from\r\n * @param scriptName name of script\r\n */\r\nexport function getScriptFromPackageJson(\r\n    host: Tree,\r\n    scriptName: string\r\n): string | null {\r\n    const packageJson: IPackageJson|null = readPackageJson(host);\r\n    if (!packageJson) {\r\n        return null;\r\n    }\r\n    return packageJson.scripts[scriptName];\r\n}\r\n\r\n/**\r\n * Add a script to package.json\r\n * @param host the tree containing package.json\r\n * @param scriptName name of script to be added.\r\n * @param content content of script\r\n */\r\nexport function addScriptToPackageJson(\r\n    host: Tree,\r\n    scriptName: string,\r\n    content: string\r\n): Tree {\r\n    if (host.exists('package.json')) {\r\n        const scriptsSection = 'scripts';\r\n        const packageJsonContent = host.read('package.json');\r\n        if (packageJsonContent) {\r\n            const sourceText = packageJsonContent.toString('utf-8');\r\n            const json = JSON.parse(sourceText);\r\n            if (!json[scriptsSection]) {\r\n                json[scriptsSection] = {};\r\n            }\r\n            if (!json[scriptsSection][scriptName]) {\r\n                json[scriptsSection][scriptName] = content;\r\n            }\r\n            host.overwrite('package.json', JSON.stringify(json, null, 2));\r\n        }\r\n    }\r\n    return host;\r\n}\r\n"]}