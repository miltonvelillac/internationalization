{"version":3,"file":"special-project.js","sourceRoot":"","sources":["../../../../../projects/tooling/src/schematics/schematics-core/utility/special-project.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Additional angular.json spefific tool functions that are not part of normal project.ts\r\n */\r\n\r\nimport {SchematicContext, SchematicsException, Tree} from '@angular-devkit/schematics';\r\nimport {WorkspaceSchema} from './config';\r\nimport {WorkspaceProject} from './project';\r\n\r\n/*\r\nprivate helper function\r\n */\r\nfunction readAngularJson(\r\n    host: Tree\r\n): WorkspaceSchema  {\r\n    const noAngularJsonMsg = 'file angular.json not found';\r\n    if (host.exists('angular.json')) {\r\n        const content = host.read('angular.json');\r\n        if (!content) {\r\n            throw new SchematicsException(noAngularJsonMsg);\r\n        }\r\n        const sourceText = content.toString('utf-8');\r\n        return JSON.parse(sourceText);\r\n    } else {\r\n        throw new SchematicsException(noAngularJsonMsg);\r\n    }\r\n}\r\n\r\n/**\r\n * Get project from angular.json.\r\n * @param host Host (Tree)\r\n * @param _context Context\r\n * @param projectName Name of project\r\n */\r\nexport function getProjectByName(\r\n    host: Tree,\r\n    _context: SchematicContext,\r\n    projectName: string,\r\n): WorkspaceProject {\r\n        const json = readAngularJson(host);\r\n        const projects = json['projects'];\r\n        if (!projects) {\r\n            throw new SchematicsException('angular.json does not contain projects');\r\n        }\r\n        const project = projects[projectName];\r\n        if (!project) {\r\n            throw new SchematicsException('angular.json does not contain project ' + projectName);\r\n        }\r\n        return project;\r\n}\r\n\r\n/**\r\n * (private) Add a configuration to angular.json.\r\n * Configuration is stored under path given as parameter.\r\n * @param host Host (Tree)\r\n * @param context Context\r\n * @param projectName Name of project\r\n * @param path path in project, like ['architect', 'build', 'configurations']\r\n * @param configurationName Name of configuration to add\r\n * @param configuration configuration object\r\n */\r\nfunction addConfigurationToProjectPath(\r\n    host: Tree,\r\n    context: SchematicContext,\r\n    projectName: string,\r\n    path: string[],\r\n    configurationName: string,\r\n    configuration: any): Tree {\r\n\r\n    const json = readAngularJson(host);\r\n    const projects = json['projects'];\r\n    if (!projects) {\r\n        throw new SchematicsException('angular.json does not contain projects');\r\n    }\r\n    const project = projects[projectName];\r\n    if (!project) {\r\n        throw new SchematicsException('angular.json does not contain project ' + projectName);\r\n    }\r\n    const configurations = getObjectFromProjectUsingPath(projectName, project, path);\r\n    configurations[configurationName] = configuration;\r\n    context.logger.debug('added configuration ' + configurationName + ' to project ' + projectName);\r\n    host.overwrite('angular.json', JSON.stringify(json, null, 2));\r\n\r\n    return host;\r\n}\r\n\r\n/**\r\n * Add a build configuration to angular.json.\r\n * Configuration is stored under architect.build.configurations\r\n * @param host Host (Tree)\r\n * @param context Context\r\n * @param projectName Name of project\r\n * @param configurationName Name of configuration to add\r\n * @param configuration configuration object\r\n */\r\nexport function addArchitectBuildConfigurationToProject(\r\n    host: Tree,\r\n    context: SchematicContext,\r\n    projectName: string,\r\n    configurationName: string,\r\n    configuration: any): Tree {\r\n\r\n    return addConfigurationToProjectPath(host, context, projectName,\r\n        ['architect', 'build', 'configurations'],\r\n        configurationName, configuration);\r\n}\r\n\r\n/**\r\n * Add a serve configuration to angular.json.\r\n * Configuration is stored under architect.serve.configurations\r\n * @param host Host (Tree)\r\n * @param context Context\r\n * @param projectName Name of project\r\n * @param configurationName Name of configuration to add\r\n * @param configuration configuration object\r\n */\r\nexport function addArchitectServeConfigurationToProject(\r\n    host: Tree,\r\n    context: SchematicContext,\r\n    projectName: string,\r\n    configurationName: string,\r\n    configuration: any): Tree {\r\n\r\n    return addConfigurationToProjectPath(host, context, projectName,\r\n        ['architect', 'serve', 'configurations'],\r\n        configurationName, configuration);\r\n}\r\n\r\n/**\r\n * (private) get a special object from project by navigating a path\r\n * Throws an exception if path does not exist.\r\n * @param projectName Name of project.\r\n * @param project the project read from angular.json\r\n * @param path path like ['architect', 'build', 'configurations']\r\n * @return the object at the path position\r\n */\r\nfunction getObjectFromProjectUsingPath(projectName: string, project: WorkspaceProject, path: string[]): any {\r\n    let object: any = project;\r\n    let currentPath = '';\r\n    for (let i = 0; i < path.length; i++) {\r\n        currentPath = currentPath + '.' + path[i];\r\n        object = object[path[i]];\r\n        if (!object) {\r\n            throw new SchematicsException('angular.json does not contain ' + currentPath + ' in project ' + projectName);\r\n        }\r\n    }\r\n    return object;\r\n}\r\n\r\n/**\r\n * Read angular.json\r\n * @return content or null, if file does not exist.\r\n */\r\nexport function getAngularJson(host: Tree): WorkspaceSchema | null {\r\n    const path = `/angular.json`;\r\n    const content = host.read(path);\r\n    if (!content) {\r\n        return null;\r\n    }\r\n    const contentString = content.toString('UTF-8');\r\n    return JSON.parse(contentString) as WorkspaceSchema;\r\n}\r\n"]}