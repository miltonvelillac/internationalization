{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../../../projects/tooling/src/schematics/schematics-core/utility/config.ts"],"names":[],"mappings":";;AAAA,2DAAuE;AAkIvE,0BAAiC,IAAU;IACvC,MAAM,aAAa,GAAG,CAAC,eAAe,EAAE,gBAAgB,CAAC,CAAC;IAC1D,MAAM,IAAI,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAE1D,OAAO,IAAI,CAAC;AAChB,CAAC;AALD,4CAKC;AAED,sBAA6B,IAAU;IACnC,MAAM,IAAI,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAC;IACpC,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrC,IAAI,YAAY,KAAK,IAAI,EAAE;QACvB,MAAM,IAAI,gCAAmB,CAAC,mBAAmB,IAAI,GAAG,CAAC,CAAC;KAC7D;IACD,MAAM,MAAM,GAAG,YAAY,CAAC,QAAQ,EAAE,CAAC;IAEvC,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AAC9B,CAAC;AATD,oCASC","sourcesContent":["import { SchematicsException, Tree } from '@angular-devkit/schematics';\r\nimport { experimental } from '@angular-devkit/core';\r\n\r\n// The interfaces below are generated from the Angular CLI configuration schema\r\n// https://github.com/angular/angular-cli/blob/master/packages/@angular/cli/lib/config/schema.json\r\nexport interface AppConfig {\r\n    /**\r\n     * Name of the app.\r\n     */\r\n    name?: string;\r\n    /**\r\n     * Directory where app files are placed.\r\n     */\r\n    appRoot?: string;\r\n    /**\r\n     * The root directory of the app.\r\n     */\r\n    root?: string;\r\n    /**\r\n     * The output directory for build results.\r\n     */\r\n    outDir?: string;\r\n    /**\r\n     * List of application assets.\r\n     */\r\n    assets?: (\r\n        | string\r\n        | {\r\n        /**\r\n         * The pattern to match.\r\n         */\r\n        glob?: string;\r\n        /**\r\n         * The dir to search within.\r\n         */\r\n        input?: string;\r\n        /**\r\n         * The output path (relative to the outDir).\r\n         */\r\n        output?: string;\r\n    })[];\r\n    /**\r\n     * URL where files will be deployed.\r\n     */\r\n    deployUrl?: string;\r\n    /**\r\n     * Base url for the application being built.\r\n     */\r\n    baseHref?: string;\r\n    /**\r\n     * The runtime platform of the app.\r\n     */\r\n    platform?: 'browser' | 'server';\r\n    /**\r\n     * The name of the start HTML file.\r\n     */\r\n    index?: string;\r\n    /**\r\n     * The name of the main entry-point file.\r\n     */\r\n    main?: string;\r\n    /**\r\n     * The name of the polyfills file.\r\n     */\r\n    polyfills?: string;\r\n    /**\r\n     * The name of the test entry-point file.\r\n     */\r\n    test?: string;\r\n    /**\r\n     * The name of the TypeScript configuration file.\r\n     */\r\n    tsconfig?: string;\r\n    /**\r\n     * The name of the TypeScript configuration file for unit tests.\r\n     */\r\n    testTsconfig?: string;\r\n    /**\r\n     * The prefix to apply to generated selectors.\r\n     */\r\n    prefix?: string;\r\n    /**\r\n     * Experimental support for a service worker from @angular/service-worker.\r\n     */\r\n    serviceWorker?: boolean;\r\n    /**\r\n     * Global styles to be included in the build.\r\n     */\r\n    styles?: (\r\n        | string\r\n        | {\r\n        input?: string;\r\n        [name: string]: any; // tslint:disable-line:no-any\r\n    })[];\r\n    /**\r\n     * Options to pass to style preprocessors\r\n     */\r\n    stylePreprocessorOptions?: {\r\n        /**\r\n         * Paths to include. Paths will be resolved to project root.\r\n         */\r\n        includePaths?: string[];\r\n    };\r\n    /**\r\n     * Global scripts to be included in the build.\r\n     */\r\n    scripts?: (\r\n        | string\r\n        | {\r\n        input: string;\r\n        [name: string]: any; // tslint:disable-line:no-any\r\n    })[];\r\n    /**\r\n     * Source file for environment config.\r\n     */\r\n    environmentSource?: string;\r\n    /**\r\n     * Name and corresponding file for environment config.\r\n     */\r\n    environments?: {\r\n        [name: string]: any; // tslint:disable-line:no-any\r\n    };\r\n    appShell?: {\r\n        app: string;\r\n        route: string;\r\n    };\r\n}\r\n\r\nexport type WorkspaceSchema = experimental.workspace.WorkspaceSchema;\r\n\r\nexport function getWorkspacePath(host: Tree): string {\r\n    const possibleFiles = ['/angular.json', '/.angular.json'];\r\n    const path = possibleFiles.filter(p => host.exists(p))[0];\r\n\r\n    return path;\r\n}\r\n\r\nexport function getWorkspace(host: Tree): WorkspaceSchema {\r\n    const path = getWorkspacePath(host);\r\n    const configBuffer = host.read(path);\r\n    if (configBuffer === null) {\r\n        throw new SchematicsException(`Could not find (${path})`);\r\n    }\r\n    const config = configBuffer.toString();\r\n\r\n    return JSON.parse(config);\r\n}\r\n"]}