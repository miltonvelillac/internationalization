{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../projects/tooling/src/schematics/src/addLanguage/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Schematic to add one or more additional languages to a project using @ngx-i18nsupport.\r\n */\r\n\r\nimport {branchAndMerge, chain, Rule, SchematicContext, SchematicsException, Tree, noop} from '@angular-devkit/schematics';\r\nimport {AddLanguageOptions} from './schema';\r\nimport {addScriptToPackageJson, getScriptFromPackageJson} from '../../schematics-core';\r\nimport {CommonOptions, extractScriptName, OptionsAfterSetup, setupCommonOptions} from '../common';\r\nimport {IXliffMergeOptions} from '@ngx-i18nsupport/ngx-i18nsupport/src/xliffmerge/i-xliff-merge-options';\r\nimport {\r\n    addLanguageConfigurationToProject,\r\n    addStartScriptToPackageJson, defaultI18nFormat, defaultI18nLocale,\r\n    fullExtractScript,\r\n    isValidLanguageSyntax\r\n} from '../common';\r\n\r\n/*\r\nreturn rule to change extract script \"extract-i18n\" to contain newly added languages.\r\n */\r\nfunction changeExtractScriptInPackageJson(options: OptionsAfterSetup, host: Tree): Rule {\r\n    // check wether it is changed\r\n    const existingScript = getScriptFromPackageJson(host, extractScriptName);\r\n    const changedScript = fullExtractScript(options);\r\n    if (existingScript !== changedScript) {\r\n        return (_host: Tree, context: SchematicContext) => {\r\n            addScriptToPackageJson(\r\n                _host,\r\n                extractScriptName,\r\n                fullExtractScript(options)\r\n            );\r\n            context.logger.info(`changed npm script to extract i18n message, run \"npm run ${extractScriptName}\" for extraction`);\r\n            return _host;\r\n        };\r\n    } else {\r\n        return noop();\r\n    }\r\n}\r\n\r\n/*\r\nreturn rule to add language configuration of newly added languages.\r\n */\r\nfunction addLanguagesToXliffmergeConfiguration(options: OptionsAfterSetup, host: Tree, languagesToAdd: string[]): Rule {\r\n    const xliffmergeJson: {xliffmergeOptions: IXliffMergeOptions}|null = readXliffmergeJson(options, host);\r\n    if (xliffmergeJson) {\r\n        const newLanguagesArray: string[] = [];\r\n        const languages = xliffmergeJson.xliffmergeOptions.languages;\r\n        if (languages) {\r\n            newLanguagesArray.push(...languages);\r\n        }\r\n        for (const lang of languagesToAdd) {\r\n            if (newLanguagesArray.indexOf(lang) < 0) {\r\n                newLanguagesArray.push(lang);\r\n            }\r\n        }\r\n        xliffmergeJson.xliffmergeOptions.languages = newLanguagesArray;\r\n        return (_host: Tree, context: SchematicContext) => {\r\n            changeXliffmergeJson(\r\n                options, _host, xliffmergeJson\r\n            );\r\n            context.logger.info('changed xliffmerge.json, added languages');\r\n            return _host;\r\n        };\r\n    } else {\r\n        return (_host: Tree, context: SchematicContext) => {\r\n            const msg = 'did not find xliffmerge.conf';\r\n            context.logger.fatal(msg);\r\n            throw new SchematicsException(msg);\r\n        };\r\n    }\r\n}\r\n\r\nfunction readXliffmergeJson(options: CommonOptions, host: Tree): {xliffmergeOptions: IXliffMergeOptions} | null {\r\n    const path = options.path ? `/${options.path}/xliffmerge.json` : '/xliffmerge.json';\r\n    const content = host.read(path);\r\n    if (!content) {\r\n        return null;\r\n    }\r\n    const contentString = content.toString('UTF-8');\r\n    return JSON.parse(contentString) as {xliffmergeOptions: IXliffMergeOptions};\r\n}\r\n\r\nfunction changeXliffmergeJson(options: CommonOptions, host: Tree, xliffmergeJson: {xliffmergeOptions: IXliffMergeOptions}): Tree {\r\n    const configPath = options.path ? `/${options.path}/xliffmerge.json` : '/xliffmerge.json';\r\n    if (host.exists(configPath)) {\r\n        host.overwrite(configPath, JSON.stringify(xliffmergeJson, null, 2));\r\n    }\r\n    return host;\r\n}\r\n\r\nfunction findConfiguredLanguages(options: CommonOptions, host: Tree): string[] {\r\n    const result: string[] = [];\r\n    // we get it from xliffmerge configuration\r\n    const xliffmergeJson: {xliffmergeOptions: IXliffMergeOptions}|null = readXliffmergeJson(options, host);\r\n    if (xliffmergeJson) {\r\n        const languages = xliffmergeJson.xliffmergeOptions.languages;\r\n        if (languages) {\r\n            result.push(...languages);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * Sets all options given by commandline or defaults.\r\n * It also checks values for correctness.\r\n * @param optionsFromCommandline command line options.\r\n * @param host the tree to lookup some workspace settings.\r\n * @param context use for error logging.\r\n * @return an object where all relevant values are set.\r\n */\r\nfunction setupOptions(optionsFromCommandline: AddLanguageOptions, host: Tree, context: SchematicContext): OptionsAfterSetup {\r\n    const options: OptionsAfterSetup = setupCommonOptions(optionsFromCommandline, host, context);\r\n    // read xliffmerge.json\r\n    const xliffmergeOptions: {xliffmergeOptions: IXliffMergeOptions}|null = readXliffmergeJson(options, host);\r\n    if (!xliffmergeOptions) {\r\n        const msg = 'Config file \"xliffmerge.json\" not found. ' +\r\n            'Please install @ngx-i18nsupport via \"ng add @ngx-i18nsupport/tooling\" to create it';\r\n        context.logger.fatal(msg);\r\n        throw new SchematicsException(msg);\r\n    }\r\n    if (xliffmergeOptions.xliffmergeOptions.i18nFormat) {\r\n        options.i18nFormat = xliffmergeOptions.xliffmergeOptions.i18nFormat;\r\n    } else {\r\n        options.i18nFormat = defaultI18nFormat;\r\n    }\r\n    if (xliffmergeOptions.xliffmergeOptions.srcDir) {\r\n        options.srcDir = xliffmergeOptions.xliffmergeOptions.srcDir;\r\n    }\r\n    if (xliffmergeOptions.xliffmergeOptions.genDir) {\r\n        options.genDir = xliffmergeOptions.xliffmergeOptions.genDir;\r\n    }\r\n    if (xliffmergeOptions.xliffmergeOptions.defaultLanguage) {\r\n        options.i18nLocale = xliffmergeOptions.xliffmergeOptions.defaultLanguage;\r\n    } else {\r\n        options.i18nLocale = defaultI18nLocale;\r\n    }\r\n    if (optionsFromCommandline.language && optionsFromCommandline.languages) {\r\n        const msg = 'Only language as parameter or --languages can be used, not both.';\r\n        context.logger.fatal(msg);\r\n        throw new SchematicsException(msg);\r\n    }\r\n    if (optionsFromCommandline.language) {\r\n        options.parsedLanguages = [optionsFromCommandline.language];\r\n    } else {\r\n        if (!optionsFromCommandline.languages) {\r\n            options.parsedLanguages = [];\r\n        } else {\r\n            options.parsedLanguages = optionsFromCommandline.languages.split(',');\r\n        }\r\n    }\r\n    if (options.parsedLanguages.length === 0) {\r\n        const msg = 'At least 1 language must be specified.';\r\n        context.logger.fatal(msg);\r\n        throw new SchematicsException(msg);\r\n    }\r\n    if (options.parsedLanguages.indexOf(options.i18nLocale) >= 0) {\r\n        const msg = `Language \"${options.i18nLocale}\" is already configured (as default language).`;\r\n        context.logger.fatal(msg);\r\n        throw new SchematicsException(msg);\r\n    }\r\n    options.configuredLanguages = findConfiguredLanguages(options, host);\r\n    // check languages\r\n    for (const lang of options.parsedLanguages) {\r\n        if (options.configuredLanguages.indexOf(lang) >= 0) {\r\n            const msg = `Language \"${lang}\" is already configured.`;\r\n            context.logger.fatal(msg);\r\n            throw new SchematicsException(msg);\r\n        }\r\n    }\r\n    for (const lang of options.parsedLanguages) {\r\n        if (!isValidLanguageSyntax(lang)) {\r\n            const msg = `\"${lang}\" is not a valid language code.`;\r\n            context.logger.fatal(msg);\r\n            throw new SchematicsException(msg);\r\n        }\r\n    }\r\n    return options;\r\n}\r\n\r\n/**\r\n * The schematic factory addLanguage.\r\n * @param optionsFromCommandline contains the languages to be added.\r\n */\r\nexport function addLanguage(optionsFromCommandline: AddLanguageOptions): Rule {\r\n    return (host: Tree, context: SchematicContext) => {\r\n        const options: OptionsAfterSetup = setupOptions(optionsFromCommandline, host, context);\r\n        const languagesToAdd = options.parsedLanguages\r\n            .filter(lang => lang !== options.i18nLocale);\r\n        const configurationAdditions = languagesToAdd\r\n            .map(lang => addLanguageConfigurationToProject(options, lang));\r\n        const startScriptAdditions = languagesToAdd\r\n            .map(lang => addStartScriptToPackageJson(options, lang));\r\n        return chain([\r\n            branchAndMerge(\r\n                chain([\r\n                    addLanguagesToXliffmergeConfiguration(options, host, languagesToAdd),\r\n                    changeExtractScriptInPackageJson(options, host),\r\n                    ...configurationAdditions,\r\n                    ...startScriptAdditions]\r\n                )\r\n            )\r\n        ])(host, context);\r\n    };\r\n}\r\n"]}