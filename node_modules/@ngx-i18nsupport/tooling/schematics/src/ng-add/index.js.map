{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../projects/tooling/src/schematics/src/ng-add/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Schematic to automatically add support for using @ngx-i18nsupport.\r\n * Will be called when you call 'ng add @ngx-i18nsupport/tooling'.\r\n */\r\n\r\nimport {apply, branchAndMerge, chain, mergeWith, move,\r\n    Rule, SchematicContext, SchematicsException,\r\n    template, Tree, url} from '@angular-devkit/schematics';\r\nimport {NodePackageInstallTask} from '@angular-devkit/schematics/tasks';\r\nimport {NgAddOptions} from './schema';\r\nimport {addPackageToPackageJson, addScriptToPackageJson, stringUtils} from '../../schematics-core';\r\nimport {\r\n    addLanguageConfigurationToProject,\r\n    isValidLanguageSyntax,\r\n    addStartScriptToPackageJson,\r\n    fullExtractScript,\r\n    OptionsAfterSetup, setupCommonOptions,\r\n    xliffmergeVersion, extractScriptName, defaultI18nLocale, xliffmergePackage\r\n} from '../common';\r\n\r\nfunction addXliffmergeDependencyToPackageJson() {\r\n    return (host: Tree, context: SchematicContext) => {\r\n        addPackageToPackageJson(\r\n            host,\r\n            'devDependencies',\r\n            xliffmergePackage,\r\n            xliffmergeVersion\r\n        );\r\n        context.addTask(new NodePackageInstallTask());\r\n        return host;\r\n    };\r\n}\r\n\r\nfunction addExtractScriptToPackageJson(options: OptionsAfterSetup) {\r\n    return (host: Tree, context: SchematicContext) => {\r\n        addScriptToPackageJson(\r\n            host,\r\n            extractScriptName,\r\n            fullExtractScript(options)\r\n        );\r\n        context.logger.info(`added npm script to extract i18n message, run \"npm run ${extractScriptName}\" for extraction`);\r\n        return host;\r\n    };\r\n}\r\n\r\n/**\r\n * Sets all options given by commandline or defaults.\r\n * It also checks values for correctness.\r\n * @param optionsFromCommandline command line options.\r\n * @param context use for error logging.\r\n * @param host the tree to lookup some workspace settings.\r\n * @return an object where all relevant values are set.\r\n */\r\nfunction setupOptions(optionsFromCommandline: NgAddOptions, host: Tree, context: SchematicContext): OptionsAfterSetup {\r\n    const options: OptionsAfterSetup = setupCommonOptions(optionsFromCommandline, host, context);\r\n    options.useComandlineForLanguages = optionsFromCommandline.useComandlineForLanguages ?\r\n        optionsFromCommandline.useComandlineForLanguages\r\n        : false;\r\n    const languagesFromCommandline = (optionsFromCommandline.languages) ? optionsFromCommandline.languages.split(',') : [];\r\n    if (!optionsFromCommandline.i18nLocale) {\r\n        if (languagesFromCommandline.length > 0) {\r\n            options.i18nLocale = languagesFromCommandline[0];\r\n        } else {\r\n            options.i18nLocale = defaultI18nLocale;\r\n        }\r\n    }\r\n    options.parsedLanguages = [options.i18nLocale];\r\n    if (optionsFromCommandline.languages) {\r\n        options.parsedLanguages.push(...languagesFromCommandline);\r\n    }\r\n    // remove duplicates\r\n    options.parsedLanguages = options.parsedLanguages.filter((v, i, a) => a.indexOf(v) === i);\r\n    for (const lang of options.parsedLanguages) {\r\n        if (!isValidLanguageSyntax(lang)) {\r\n            const msg = `\"${lang}\" is not a valid language code.`;\r\n            context.logger.fatal(msg);\r\n            throw new SchematicsException(msg);\r\n        }\r\n    }\r\n    return options;\r\n}\r\n\r\n// You don't have to export the function as default. You can also have more than one rule factory\r\n// per file.\r\n// noinspection JSUnusedGlobalSymbols\r\nexport function ngAdd(optionsFromCommandline: NgAddOptions): Rule {\r\n  return (host: Tree, context: SchematicContext) => {\r\n      const options: OptionsAfterSetup = setupOptions(optionsFromCommandline, host, context);\r\n      const templateSource = apply(url('./files'), [\r\n          template({\r\n              ...stringUtils,\r\n              ...(options as object),\r\n              'i18nLocale': options.i18nLocale,\r\n              'i18nFormat': options.i18nFormat\r\n          } as any),\r\n          move(options.path ? options.path : ''),\r\n      ]);\r\n\r\n      const configurationAdditions = options.parsedLanguages\r\n          .filter(lang => lang !== options.i18nLocale)\r\n          .map(lang => addLanguageConfigurationToProject(options, lang));\r\n      const startScriptAdditions = options.parsedLanguages\r\n          .filter(lang => lang !== options.i18nLocale)\r\n          .map(lang => addStartScriptToPackageJson(options, lang));\r\n      return chain([\r\n          branchAndMerge(\r\n              chain([\r\n                  addExtractScriptToPackageJson(options),\r\n                  ...configurationAdditions,\r\n                  ...startScriptAdditions,\r\n                  mergeWith(templateSource)]\r\n              )\r\n          ),\r\n          addXliffmergeDependencyToPackageJson(),\r\n      ])(host, context);\r\n  };\r\n}\r\n"]}