{"version":3,"file":"common-testing_spec.js","sourceRoot":"","sources":["../../../../../projects/tooling/src/schematics/src/common/common-testing_spec.ts"],"names":[],"mappings":";AAAA;;GAEG;;AAQU,QAAA,gBAAgB,GAAqB;IAC9C,IAAI,EAAE,WAAW;IACjB,cAAc,EAAE,UAAU;IAC1B,OAAO,EAAE,OAAO;CACnB,CAAC;AAEF,oBAA8B,IAAkB,EAAE,IAAY;IAC1D,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChC,IAAI,CAAC,OAAO,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,OAAO,GAAG,IAAI,GAAG,oBAAoB,CAAC,CAAC;KAC1D;IACD,MAAM,aAAa,GAAG,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAChD,OAAO,IAAI,CAAC,KAAK,CAAC,aAAa,CAAM,CAAC;AAC1C,CAAC;AAPD,gCAOC;AAED,yBAAgC,IAAkB;IAC9C,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;IAC9C,OAAO,UAAU,CAAe,IAAI,EAAE,eAAe,CAAC,CAAC;AAC3D,CAAC;AAHD,0CAGC;AAED,yBAAgC,IAAkB;IAC9C,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;IAC9C,OAAO,UAAU,CAAkB,IAAI,EAAE,eAAe,CAAC,CAAC;AAC9D,CAAC;AAHD,0CAGC;AAED,4BAAmC,WAAmB,EAAE,IAAkB;IACtE,MAAM,IAAI,GAAG,WAAW,CAAC,CAAC,CAAC,aAAa,WAAW,kBAAkB,CAAC,CAAC,CAAC,kBAAkB,CAAC;IAC3F,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACnC,OAAO,UAAU,CAA0C,IAAI,EAAE,IAAI,CAAC,CAAC;AAC3E,CAAC;AAJD,gDAIC","sourcesContent":["/**\r\n * Some common functions used by testcases.\r\n */\r\n\r\nimport {UnitTestTree} from '@angular-devkit/schematics/testing';\r\nimport {Schema as WorkspaceOptions} from '@schematics/angular/workspace/schema';\r\nimport {IPackageJson} from '../../schematics-core';\r\nimport {WorkspaceSchema} from '../../schematics-core/utility/config';\r\nimport {IXliffMergeOptions} from '@ngx-i18nsupport/ngx-i18nsupport/src/xliffmerge/i-xliff-merge-options';\r\n\r\nexport const workspaceOptions: WorkspaceOptions = {\r\n    name: 'workspace',\r\n    newProjectRoot: 'projects',\r\n    version: '6.0.0',\r\n};\r\n\r\nexport function readAsJson<T>(tree: UnitTestTree, path: string): T {\r\n    const content = tree.read(path);\r\n    if (!content) {\r\n        throw new Error('file ' + path + ' not found in tree');\r\n    }\r\n    const contentString = content.toString('UTF-8');\r\n    return JSON.parse(contentString) as T;\r\n}\r\n\r\nexport function readPackageJson(tree: UnitTestTree): IPackageJson {\r\n    expect(tree.files).toContain('/package.json');\r\n    return readAsJson<IPackageJson>(tree, '/package.json');\r\n}\r\n\r\nexport function readAngularJson(tree: UnitTestTree): WorkspaceSchema {\r\n    expect(tree.files).toContain('/angular.json');\r\n    return readAsJson<WorkspaceSchema>(tree, '/angular.json');\r\n}\r\n\r\nexport function readXliffmergeJson(projectName: string, tree: UnitTestTree): {xliffmergeOptions: IXliffMergeOptions} {\r\n    const path = projectName ? `/projects/${projectName}/xliffmerge.json` : '/xliffmerge.json';\r\n    expect(tree.files).toContain(path);\r\n    return readAsJson<{xliffmergeOptions: IXliffMergeOptions}>(tree, path);\r\n}\r\n\r\n"]}