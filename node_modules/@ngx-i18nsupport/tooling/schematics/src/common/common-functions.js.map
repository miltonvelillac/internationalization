{"version":3,"file":"common-functions.js","sourceRoot":"","sources":["../../../../../projects/tooling/src/schematics/src/common/common-functions.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Functions shared between the schematics.\r\n **/\r\n\r\nimport {OptionsAfterSetup} from './options-after-setup';\r\nimport {SchematicContext, Tree} from '@angular-devkit/schematics';\r\nimport {\r\n    addArchitectBuildConfigurationToProject,\r\n    addArchitectServeConfigurationToProject,\r\n    addScriptToPackageJson\r\n} from '../../schematics-core';\r\n\r\n/**\r\n * Check syntax of language code.\r\n * (pattern copied from xliffmerge)\r\n * Must be compatible with XML Schema type xsd:language.\r\n * Pattern: [a-zA-Z]{1,8}((-|_)[a-zA-Z0-9]{1,8})*\r\n * @param lang the language code\r\n * @return true, if valid, false otherwise\r\n */\r\nexport function isValidLanguageSyntax(lang: string): boolean {\r\n    const pattern = /^[a-zA-Z]{1,8}([-_][a-zA-Z0-9]{1,8})*$/;\r\n    return pattern.test(lang);\r\n}\r\n\r\nexport function fullExtractScript(options: OptionsAfterSetup): string {\r\n    const defaultLanguage = options.i18nLocale;\r\n    const i18nFormat = options.i18nFormat;\r\n    const languagesBlankSeparated = options.languages ? options.languages.replace(/,/g, ' ') : '';\r\n    const languagesCommandLineArgument = (options.useComandlineForLanguages) ? ' ' + languagesBlankSeparated : '';\r\n    const localeDir = options.localePath;\r\n    const configFilePath = 'xliffmerge.json';\r\n    return `ng xi18n --i18n-format ${i18nFormat} --output-path ${localeDir} --i18n-locale ${defaultLanguage}\\\r\n && xliffmerge --profile ${configFilePath}${languagesCommandLineArgument}`;\r\n}\r\n\r\n/**\r\n * returns the build configuration to be set.\r\n */\r\nexport function buildConfigurationForLanguage(options: OptionsAfterSetup, language: string): any {\r\n    return {\r\n        aot: true,\r\n        outputPath: `dist/${options.project}-${language}`,\r\n        i18nFile: `${options.genDir}/messages.${language}.xlf`,\r\n        i18nFormat: options.i18nFormat,\r\n        i18nLocale: language\r\n    };\r\n}\r\n\r\n/**\r\n * returns the serve configuration to be set.\r\n */\r\nexport function serveConfigurationForLanguage(options: OptionsAfterSetup, language: string): any {\r\n    return {\r\n        browserTarget: `${options.project}:build:${language}`\r\n    };\r\n}\r\n\r\n/**\r\n * Add a start script.\r\n * Script will be named 'start-<language>' or 'start-<project>-<language'.\r\n * @param options options options containing project etc.\r\n * @param language language to be added.\r\n */\r\nexport function addStartScriptToPackageJson(options: OptionsAfterSetup, language: string) {\r\n    return (host: Tree, context: SchematicContext) => {\r\n        const scriptName = (options.isDefaultProject) ? `start-${language}` : `start-${options.project}-${language}`;\r\n        addScriptToPackageJson(\r\n            host,\r\n            scriptName,\r\n            startScript(options, language)\r\n        );\r\n        context.logger.info(`added npm script to start app for language ${language}, run \"npm run ${scriptName}\"`);\r\n        return host;\r\n    };\r\n}\r\n\r\n/**\r\n * returns the start script to be added.\r\n */\r\nfunction startScript(options: OptionsAfterSetup, language: string): string {\r\n    if (options.isDefaultProject) {\r\n        return `ng serve --configuration=${language}`;\r\n    } else {\r\n        return `ng serve ${options.project} --configuration=${language}`;\r\n    }\r\n}\r\n\r\n/**\r\n * Add the build and serve configuration for a given language to angular.json.\r\n * @param options options containing project etc.\r\n * @param language the language to be added.\r\n */\r\nexport function addLanguageConfigurationToProject(options: OptionsAfterSetup, language: string) {\r\n    return (host: Tree, context: SchematicContext) => {\r\n        addArchitectBuildConfigurationToProject(\r\n            host,\r\n            context,\r\n            options.project,\r\n            language,\r\n            buildConfigurationForLanguage(options, language)\r\n        );\r\n        context.logger.info(`added build configuration for language \"${language}\" to project \"${options.project}\"`);\r\n        addArchitectServeConfigurationToProject(\r\n            host,\r\n            context,\r\n            options.project,\r\n            language,\r\n            serveConfigurationForLanguage(options, language)\r\n        );\r\n        context.logger.info(`added serve configuration for language \"${language}\" to project \"${options.project}\"`);\r\n        return host;\r\n    };\r\n}\r\n"]}